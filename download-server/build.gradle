/*
 *     Copyright 2023 Michael Sonst @ https://www.corporate-startup.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id 'java-lib-conventions'
  //id 'org.springframework.boot'
  //id 'io.spring.dependency-management'
}

apply from: file("${rootDir}/buildSrc/publishing.gradle")

description = 'Resuming file download-server with REST interface.'

repositories {
  jcenter()
  maven { url 'https://repo.spring.io/release/' }
  maven { url "https://repo.spring.io/libs-snapshot-local" }
  maven { url "https://repo.spring.io/libs-milestone-local" }
  maven { url "https://repo.spring.io/libs-release-local" }
  //mavenCentral()
}

configurations {
  agent
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {

  implementation 'commons-io:commons-io:2.15.1'

  implementation 'com.github.docker-java:docker-java:3.3.4'
  implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.3.4'
  implementation 'org.apache.sshd:sshd-core:2.11.0'
  implementation 'com.jcraft:jsch:0.1.55'

  implementation platform("org.springframework.boot:spring-boot-dependencies:${springbootversion}")

  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation 'com.h2database:h2:2.2.224'
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
  implementation "org.slf4j:slf4j-api:2.0.9"
  implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
  implementation "org.junit.platform:junit-platform-launcher:1.10.1"

  implementation('org.seleniumhq.selenium:selenium-java:4.15.0'){
    exclude group: 'io.opentelemetry', module: 'opentelemetry-api'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk-common'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-context'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk-extension-autoconfigure-spi'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk-trace'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-exporter-logging'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk-semconf'
    exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk-metrics'
  }


  runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'io.opentelemetry.javaagent:opentelemetry-javaagent:1.32.0'
  implementation 'io.opentelemetry:opentelemetry-api:1.33.0'
  implementation 'io.opentelemetry:opentelemetry-extension-annotations:1.18.0'

  //  implementation 'com.grafana:grafana-opentelemetry-starter:1.0.0'
  //
  //  implementation platform("io.opentelemetry:opentelemetry-bom:1.2.0")
  //  implementation('io.opentelemetry:opentelemetry-api')
  //  implementation('io.opentelemetry:opentelemetry-sdk')
  //  implementation('io.opentelemetry:opentelemetry-exporter-otlp')
  //  implementation('io.opentelemetry:opentelemetry-semconv:1.5.0-alpha')
  //  implementation('io.grpc:grpc-netty-shaded:1.39.0')



  testImplementation "org.junit.jupiter:junit-jupiter:${junitjupiterversion}"
  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitjupiterversion}"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitjupiterversion}"
  testImplementation "org.mockito:mockito-core:5.7.0"
}

application {
  // Define the main class for the application.
  mainClass = 'com.cs.download.server.ServerApplication'
  applicationDefaultJvmArgs = [
    '-XX:InitialRAMPercentage=80.0',
    '-XX:MaxRAMPercentage=80.0',
    '-Dotel.metrics.exporter=none',
    "-Dotel.resource.attributes=rest.name=${rootProject.name}".toString(),
    '-Dotel.javaagent.debug=false',
    "-javaagent:/${project.name}-${version}/lib/opentelemetry-javaagent-1.32.0.jar"
  ]

  startScripts {
    classpath += files('config')
  }
}

docker {
  copySpec.with {
    from('.') {
      include 'config/**'
      into '.'
    }
  }
}

dockerRun {
  ports '9091:9091'
}